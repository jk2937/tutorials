MIDI Through Port Part Two

Welcome to Jonny's Tutorials! In this tutorial, you will learn how to capture MIDI events from a digital audio workstation (DAW) in real-time using the MusE DAW in Linux, the MIDI Through Port, and Python. While MusE has its own Python interface, this tutorial utilizes the MIDI Through Port to ensure compatibility with other software such as aplaymidi.

This tutorial assumes you've gone through Tutorial Part One, which focuses on creating a basic MIDI Through Port reader using Python in Linux. 

To get started, install the required packages using the following command in your terminal:

Install packages

$  sudo apt-get install qjackctl muse qsynth

For this tutorial, it doesn't matter if you agree to enable real-time priority when asked. I chose to accept it during my setup.

Todo: test no realtime priority

Now we will start jack using qjackctl. Be aware that changing the master volume control after starting Jack has no effect on playback levels. Make certain to increase the volume beforehand.
Double-check that the MIDI Driver in qjackctl's Setup menu is configured as 'seq.'
Press 'Start' to launch Jack. If jack fails to launch on the first attempt, try again. At times, Jack launches successfully on the second attempt despite identical settings.
If you have issues, adjust the Interface, Sample Rate, Frames/Period, and Periods/Buffer parameters in 'Setup'. Rebooting your PC and try again if problems persist.

Now, launch MusE. You may be prompted to send Instrument Initialization Sequences; for the purposes of this tutorial, it does not matter whether you select 'Yes' or 'No,'. I recommend clicking 'Yes'.

Now, let's move on to setting up Qsynth. To begin, open Qsynth and click on 'Setup' followed by 'Soundfonts.' From there, you can load a SoundFont bank by clicking 'Open' and browsing through your collection. You should see options available from the default SF2 folder. After selecting the soundfont click yes to restart the audio engine.
Note that you only need to complete this process once. 

Import the example MIDI file

Next, we're going to import the example MIDI file. First, locate the daisy-bell.mid file you downloaded from the previous tutorial. Then, drag and drop it onto the Part Canvas within MusE. Finally, click 'Add To Project.'

Run the Python script:

It's time to run our Python script. Open a terminal window and navigate to the midi-tutorial directory using the command line. Enter the following commands:

cd midi-tutorial/
todo: change to ~/midi-tutorial

Then activate the virtual environment and execute the script:

source venv/bin/activate
python3 midi_through_port_test.py


Begin playback within MusE:

Click the Play button located near the top left corner of the MusE interface to initiate playback.

Real-time MIDI messages will now print in the console alongside timestamps.
Congratulations! By following this tutorial, you have successfully captured MIDI events from a DAW using Python and the MIDI Through Port. Feel free to explore further possibilities with MIDI and Python. 

To finish up, close qsynth, and MusE, stop jack using qjackctl, then close qjackctl.

